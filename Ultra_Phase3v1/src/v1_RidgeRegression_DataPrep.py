

import cPickle as pickle
import gzip
import os
import sys
import timeit

import numpy

import theano
import theano.tensor as T


'''
####################################################################################
'''

def load_data(dataset_name, path_dataset, valid_portion=0.1):
    '''
    Loads the dataset
    
    dataset_name: e.g. 'perDayTweets_2016_11-03_train.pkl'
    path_dataset: e.g. '../Data/DataSet_Training/'
    '''
    #################################################################
    # Load the dataset

    root_path = os.path.dirname(os.path.realpath('__file__'))
    dataset = os.path.join(root_path, path_dataset)
    dataset = dataset + dataset_name
    
    f = open(dataset, 'rb')
    # training data set is generated by 2 pkl.dump()
    # (X_train, Y_train)
    train_set = pickle.load(f) 
    test_set = pickle.load(f) 
    f.close()
    #################################################################       

    # split training set into validation set
    train_set_x, train_set_y = train_set
    n_samples = len(train_set_x)
    # draw validation set randomly
    sidx = numpy.random.permutation(n_samples) 
    n_train = int(numpy.round(n_samples * (1. - valid_portion)))
    # validation
    valid_set_x = [train_set_x[s] for s in sidx[n_train:]]
    valid_set_y = [train_set_y[s] for s in sidx[n_train:]]
    valid_set = (valid_set_x, valid_set_y)
    # training
    train_set_x = [train_set_x[s] for s in sidx[:n_train]]
    train_set_y = [train_set_y[s] for s in sidx[:n_train]]
    train_set = (train_set_x, train_set_y)
    
    #################################################################   
    def shared_dataset(data_xy, borrow=True):
        '''
        data_xy is a tuple (X, Y)
        '''
        data_x, data_y = data_xy
        shared_x = theano.shared(numpy.asarray(data_x,dtype=theano.config.floatX),borrow=borrow)
        shared_y = theano.shared(numpy.asarray(data_y,dtype=theano.config.floatX),borrow=borrow)

        return shared_x, T.cast(shared_y, 'int32')
    #################################################################

    train_set_x, train_set_y = shared_dataset(train_set)
    valid_set_x, valid_set_y = shared_dataset(valid_set)
    test_set_x, test_set_y = shared_dataset(test_set)

    #################################################################
    rval = [(train_set_x, train_set_y), (valid_set_x, valid_set_y),(test_set_x, test_set_y)]
    return rval


